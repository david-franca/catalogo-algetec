/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicSignupRouteImport } from './routes/_public/signup'
import { Route as PublicRecoverRouteImport } from './routes/_public/recover'
import { Route as AuthenticatedCatalogRouteImport } from './routes/_authenticated/catalog'
import { Route as AuthenticatedCatalogIndexRouteImport } from './routes/_authenticated/catalog/index'
import { Route as AuthenticatedCatalogDashboardRouteImport } from './routes/_authenticated/catalog/dashboard'
import { Route as AuthenticatedCatalogCategorySlugRouteImport } from './routes/_authenticated/catalog/$categorySlug'
import { Route as AuthenticatedCatalogCategorySlugSubcategorySlugRouteImport } from './routes/_authenticated/catalog/$categorySlug/$subcategorySlug'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const PublicSignupRoute = PublicSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicRoute,
} as any)
const PublicRecoverRoute = PublicRecoverRouteImport.update({
  id: '/recover',
  path: '/recover',
  getParentRoute: () => PublicRoute,
} as any)
const AuthenticatedCatalogRoute = AuthenticatedCatalogRouteImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedCatalogIndexRoute =
  AuthenticatedCatalogIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedCatalogRoute,
  } as any)
const AuthenticatedCatalogDashboardRoute =
  AuthenticatedCatalogDashboardRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => AuthenticatedCatalogRoute,
  } as any)
const AuthenticatedCatalogCategorySlugRoute =
  AuthenticatedCatalogCategorySlugRouteImport.update({
    id: '/$categorySlug',
    path: '/$categorySlug',
    getParentRoute: () => AuthenticatedCatalogRoute,
  } as any)
const AuthenticatedCatalogCategorySlugSubcategorySlugRoute =
  AuthenticatedCatalogCategorySlugSubcategorySlugRouteImport.update({
    id: '/$subcategorySlug',
    path: '/$subcategorySlug',
    getParentRoute: () => AuthenticatedCatalogCategorySlugRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/catalog': typeof AuthenticatedCatalogRouteWithChildren
  '/recover': typeof PublicRecoverRoute
  '/signup': typeof PublicSignupRoute
  '/': typeof PublicIndexRoute
  '/catalog/$categorySlug': typeof AuthenticatedCatalogCategorySlugRouteWithChildren
  '/catalog/dashboard': typeof AuthenticatedCatalogDashboardRoute
  '/catalog/': typeof AuthenticatedCatalogIndexRoute
  '/catalog/$categorySlug/$subcategorySlug': typeof AuthenticatedCatalogCategorySlugSubcategorySlugRoute
}
export interface FileRoutesByTo {
  '/recover': typeof PublicRecoverRoute
  '/signup': typeof PublicSignupRoute
  '/': typeof PublicIndexRoute
  '/catalog/$categorySlug': typeof AuthenticatedCatalogCategorySlugRouteWithChildren
  '/catalog/dashboard': typeof AuthenticatedCatalogDashboardRoute
  '/catalog': typeof AuthenticatedCatalogIndexRoute
  '/catalog/$categorySlug/$subcategorySlug': typeof AuthenticatedCatalogCategorySlugSubcategorySlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authenticated/catalog': typeof AuthenticatedCatalogRouteWithChildren
  '/_public/recover': typeof PublicRecoverRoute
  '/_public/signup': typeof PublicSignupRoute
  '/_public/': typeof PublicIndexRoute
  '/_authenticated/catalog/$categorySlug': typeof AuthenticatedCatalogCategorySlugRouteWithChildren
  '/_authenticated/catalog/dashboard': typeof AuthenticatedCatalogDashboardRoute
  '/_authenticated/catalog/': typeof AuthenticatedCatalogIndexRoute
  '/_authenticated/catalog/$categorySlug/$subcategorySlug': typeof AuthenticatedCatalogCategorySlugSubcategorySlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/catalog'
    | '/recover'
    | '/signup'
    | '/'
    | '/catalog/$categorySlug'
    | '/catalog/dashboard'
    | '/catalog/'
    | '/catalog/$categorySlug/$subcategorySlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/recover'
    | '/signup'
    | '/'
    | '/catalog/$categorySlug'
    | '/catalog/dashboard'
    | '/catalog'
    | '/catalog/$categorySlug/$subcategorySlug'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/catalog'
    | '/_public/recover'
    | '/_public/signup'
    | '/_public/'
    | '/_authenticated/catalog/$categorySlug'
    | '/_authenticated/catalog/dashboard'
    | '/_authenticated/catalog/'
    | '/_authenticated/catalog/$categorySlug/$subcategorySlug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/signup': {
      id: '/_public/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicSignupRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/recover': {
      id: '/_public/recover'
      path: '/recover'
      fullPath: '/recover'
      preLoaderRoute: typeof PublicRecoverRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authenticated/catalog': {
      id: '/_authenticated/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof AuthenticatedCatalogRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/catalog/': {
      id: '/_authenticated/catalog/'
      path: '/'
      fullPath: '/catalog/'
      preLoaderRoute: typeof AuthenticatedCatalogIndexRouteImport
      parentRoute: typeof AuthenticatedCatalogRoute
    }
    '/_authenticated/catalog/dashboard': {
      id: '/_authenticated/catalog/dashboard'
      path: '/dashboard'
      fullPath: '/catalog/dashboard'
      preLoaderRoute: typeof AuthenticatedCatalogDashboardRouteImport
      parentRoute: typeof AuthenticatedCatalogRoute
    }
    '/_authenticated/catalog/$categorySlug': {
      id: '/_authenticated/catalog/$categorySlug'
      path: '/$categorySlug'
      fullPath: '/catalog/$categorySlug'
      preLoaderRoute: typeof AuthenticatedCatalogCategorySlugRouteImport
      parentRoute: typeof AuthenticatedCatalogRoute
    }
    '/_authenticated/catalog/$categorySlug/$subcategorySlug': {
      id: '/_authenticated/catalog/$categorySlug/$subcategorySlug'
      path: '/$subcategorySlug'
      fullPath: '/catalog/$categorySlug/$subcategorySlug'
      preLoaderRoute: typeof AuthenticatedCatalogCategorySlugSubcategorySlugRouteImport
      parentRoute: typeof AuthenticatedCatalogCategorySlugRoute
    }
  }
}

interface AuthenticatedCatalogCategorySlugRouteChildren {
  AuthenticatedCatalogCategorySlugSubcategorySlugRoute: typeof AuthenticatedCatalogCategorySlugSubcategorySlugRoute
}

const AuthenticatedCatalogCategorySlugRouteChildren: AuthenticatedCatalogCategorySlugRouteChildren =
  {
    AuthenticatedCatalogCategorySlugSubcategorySlugRoute:
      AuthenticatedCatalogCategorySlugSubcategorySlugRoute,
  }

const AuthenticatedCatalogCategorySlugRouteWithChildren =
  AuthenticatedCatalogCategorySlugRoute._addFileChildren(
    AuthenticatedCatalogCategorySlugRouteChildren,
  )

interface AuthenticatedCatalogRouteChildren {
  AuthenticatedCatalogCategorySlugRoute: typeof AuthenticatedCatalogCategorySlugRouteWithChildren
  AuthenticatedCatalogDashboardRoute: typeof AuthenticatedCatalogDashboardRoute
  AuthenticatedCatalogIndexRoute: typeof AuthenticatedCatalogIndexRoute
}

const AuthenticatedCatalogRouteChildren: AuthenticatedCatalogRouteChildren = {
  AuthenticatedCatalogCategorySlugRoute:
    AuthenticatedCatalogCategorySlugRouteWithChildren,
  AuthenticatedCatalogDashboardRoute: AuthenticatedCatalogDashboardRoute,
  AuthenticatedCatalogIndexRoute: AuthenticatedCatalogIndexRoute,
}

const AuthenticatedCatalogRouteWithChildren =
  AuthenticatedCatalogRoute._addFileChildren(AuthenticatedCatalogRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedCatalogRoute: typeof AuthenticatedCatalogRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCatalogRoute: AuthenticatedCatalogRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicRecoverRoute: typeof PublicRecoverRoute
  PublicSignupRoute: typeof PublicSignupRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicRecoverRoute: PublicRecoverRoute,
  PublicSignupRoute: PublicSignupRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
